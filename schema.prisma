// datasource db defines the database connection settings.
// It is configured for PostgreSQL and uses an environment variable for the connection URL.
// The 'extensions' feature enables the use of PostgreSQL-specific data types.
datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
}

// generator db configures Prisma Client settings.
// It is set up to use Prisma Client Python with asyncio interface and specific features.
generator db {
  provider             = "prisma-client-py"
  interface            = "asyncio"
  recursive_type_depth = 5
  previewFeatures      = ["postgresqlExtensions"]
}

model User {
  id                  String              @id @default(dbgenerated("gen_random_uuid()"))
  email               String              @unique
  hashedPassword      String
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  role                UserRole            @default(BASICUSER)
  UserPreferences     UserPreference[]
  TextToSpeechEntries TextToSpeechEntry[]
  ApiKeys             ApiKey[]
  AccessLog           AccessLog[]
  Subscription        Subscription[]
  RateLimit           RateLimit[]
  Feedback            Feedback[]
}

model UserPreference {
  id        String   @id @default(dbgenerated("gen_random_uuid()"))
  userId    String
  language  String
  accent    String
  pitch     Float
  speed     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model TextToSpeechEntry {
  id        String   @id @default(dbgenerated("gen_random_uuid()"))
  userId    String
  text      String
  language  String
  accent    String
  pitch     Float
  speed     Float
  audioUrl  String
  createdAt DateTime @default(now())
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ApiKey {
  id        String   @id @default(dbgenerated("gen_random_uuid()"))
  userId    String
  key       String   @unique
  createdAt DateTime @default(now())
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model AccessLog {
  id           String   @id @default(dbgenerated("gen_random_uuid()"))
  userId       String
  endpoint     String
  accessedAt   DateTime @default(now())
  responseData String
  User         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Subscription {
  id        String           @id @default(dbgenerated("gen_random_uuid()"))
  userId    String
  plan      SubscriptionPlan
  startDate DateTime         @default(now())
  endDate   DateTime
  User      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model RateLimit {
  id       String   @id @default(dbgenerated("gen_random_uuid()"))
  userId   String
  endpoint String
  count    Int
  resetAt  DateTime
  User     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Feedback {
  id        String   @id @default(dbgenerated("gen_random_uuid()"))
  userId    String?
  text      String
  createdAt DateTime @default(now())
  User      User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
}

enum UserRole {
  BASICUSER
  PREMIUMUSER
  ADMIN
}

enum SubscriptionPlan {
  FREE
  MONTHLY
  YEARLY
}

